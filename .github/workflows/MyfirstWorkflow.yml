name: My First Workflow

on:
  workflow_dispatch:
    inputs:
      test:
        description: "It's nice to see this description"
        required: true
      loglevel:
        description: "Log level"
        default: info
        type: choice
        options:
          - info
          - warning
          - debug
      testbuild:
        description: "It's a test build"
        required: true
        type: boolean
      environment:
        description: "Env to deploy"
        type: environment
        required: true
  # FIX: Added repository_dispatch trigger to enable the use of github.event.client_payload
  repository_dispatch:

env:
  TEST_ACROSS_JOBS: test

jobs:
  matrix_super_job:
    name: Super Efficient Build
    strategy:
      fail-fast: false
      max-parallel: 3
      matrix:
        os_version: [ubuntu-latest]
        node_version: [20, 22, 24]
    runs-on: ${{ matrix.os_version }}
    steps:
      - name: Install NodeJS
        uses: actions/setup-node@v6
        with:
          node-version: ${{ matrix.node_version }}

  MyFirstJob:
    runs-on: ubuntu-latest
    steps:
      - name: Hello World
        run: |
          echo "Hello World"

      - name: Checkout
        uses: actions/checkout@v5.0.0

      - name: List files
        run: |
          echo "Event: ${{ github.event_name }}"
          echo "This repository ${{ github.repository }} contains the following files:"
          tree -a

      - name: Show inputs
        if: ${{ github.event_name == 'workflow_dispatch' }}
        run: |    
          echo "test input value: ${{ inputs.test }}"
          echo "loglevel input: ${{ inputs.loglevel }}"
          echo "testbuild input: ${{ inputs.testbuild }}"
          echo "environment input: ${{ inputs.environment }}"

      - name: Show payload
        if: ${{ github.event_name == 'repository_dispatch' }}
        run: |
          # This context access is now valid because repository_dispatch is an allowed trigger
          echo Payload: '${{ toJSON(github.event.client_payload) }}'

  MySecondJob:
    runs-on: ubuntu-latest
    needs: MyFirstJob
    steps:
      - run: "echo Job: ${{ github.job }}"
    
  MyThirdJob:
    runs-on: ubuntu-latest
    needs: MyFirstJob
    steps:
      - run: "echo Job: ${{ github.job }}"
      
  MyFourthJob:
    needs: [MySecondJob, MyThirdJob]
    runs-on: ubuntu-latest
    steps:
      - run: "echo Job: ${{ github.job }}"

  MyFifthJob:
    runs-on: ubuntu-latest
    steps:
      - run: "echo Job: ${{ github.job }}"

  Post:
    runs-on: ubuntu-latest
    steps:
      - id: test_step
        run: | 
          echo "Post"
          test_results=$((RANDOM))
          sleep_time=1
          echo "::add-mask::$test_results"
          echo "::add-mask::$sleep_time"
          echo "test_results=$test_results" >> "$GITHUB_OUTPUT"
          echo "sleep_time=$sleep_time" >> "$GITHUB_OUTPUT"
          echo "TEST_RESULTS=$test_results" >> "$GITHUB_ENV"
          echo "SLEEP_TIME=$sleep_time" >> "$GITHUB_ENV"
        env:
          AWS_REGION: us-east-1

      - if: failure()
        run: |
          echo "::debug::Debug message" 
          echo "::error file=.github/workflows/MyFirstWorkflow.yml,line=99::Failed!"
          echo "::warning file=.github/workflows/MyFirstWorkflow.yml,line=99,endLine=105,col=76,endColumn=111,title=warning_title::warning message"

      - if: cancelled()
        run: echo "Cancelled" 

      - if: success()
        run: echo "Success!"

      - if: always()
        run: |
          echo "Test results: ${{ steps.test_step.outputs.test_results }}"
          sleep ${{ steps.test_step.outputs.sleep_time }}
          echo "Always"
